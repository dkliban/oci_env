#!/bin/bash

set -o nounset
set -o errexit

# the internal mechanisms for installing and testing do not
# work if the checkout path is not named "oci_env", so
# this script should -always- abort if that is not the case.
CWD=$(basename $(pwd))
if [[ "${CWD}" != "oci_env" ]]; then
    cat >&2 <<EOF
ERROR: The checkout directory -must- be named oci_env. A different
       name can cause many unintended behaviors inside the containers
EOF
    exit 1
fi

if [[ -f '.compose.env' ]]; then
  # export variables from .compose.env but only if the var is not already set.
  eval "$(grep -v '^#' .compose.env | sed -E 's|^(.+)=(.*)$|export \1=${\1:-\2}|g' | xargs -L 1)"
fi

# if [[ -z "${COMPOSE_PROFILE:-}" ]]; then
#   cat >&2 <<EOF
# ERROR: The \$COMPOSE_PROFILE environment variable MUST be set.
#        The the easiest way to to this is to create a .compose.env file by running:

#            \$ cp .compose.env.example .compose.env
# EOF
#   exit 1
# fi

source ./config_loader.sh

echo "INFO: Using compose profile ${COMPOSE_PROFILE}" >&2
echo "INFO: ${DEV_SOURCE_PATH:-No} packages installed from source" >&2
echo "INFO: Image suffix ${DEV_IMAGE_SUFFIX:-is unset}" >&2
echo "INFO: Volume suffix ${DEV_VOLUME_SUFFIX:-${DEV_IMAGE_SUFFIX:-is unset}}" >&2

# profile loader
# separate profiles with :
# if profile has /, load from plugin/profiles
# else load from ./profiles
# add profile/{NAME}/compose.yaml to compose args
# concatenate profile/{NAME}/pulp_config.env into ./.combined.env

compose_file_list=(
  'base/compose.yaml'
)

cat 'base/pulp_config.env' > '.combined.env'

echo '#!/bin/bash' > .init.sh
echo '' >> .init.sh
echo '# AUTOGENERATED by ./compose' >> .init.sh
echo '# This script runs automatically when the container starts.' >> .init.sh
echo '' >> .init.sh
echo 'bash /src/oci_env/base/init.sh' >> .init.sh

if [[ ! -z "${COMPOSE_PROFILE}" ]]; then
  IFS=':' read -ra src_path_list <<< "$COMPOSE_PROFILE"

  for item in "${src_path_list[@]}"; do
    compose_file="./profiles/${item}/compose.yaml"
    config_file="./profiles/${item}/pulp_config.env"
    init_script="../oci_env/profiles/${item}/init.sh"

    if [[ "$item" == *\/* ]]
    then
      profile=()
      IFS='/' read -ra profile <<< "$item"

      compose_file="../${profile[0]}/profiles/${profile[1]}/compose.yaml"
      config_file="../${profile[0]}/profiles/${profile[1]}/pulp_config.env"
      init_script="../${profile[0]}/profiles/${profile[1]}/init.sh"
    fi

    if [[ -f $compose_file ]]; then

      compose_file_list+=(
        -f $compose_file
      )
    fi

    if [[ -f $config_file ]]; then
      { echo "" & cat $config_file; } >> '.combined.env'
    fi

    if [[ -f $init_script ]]; then
      echo "bash ${init_script//\.\.//src}" >> '.init.sh'
    fi
  done
fi

# substitute variables allowed in env files
sed -i.bak -e 's|${API_PORT}|'$API_PORT'|g' .combined.env
sed -i.bak -e 's|${API_PROTOCOL}|'$API_PROTOCOL'|g' .combined.env
sed -i.bak -e 's|${API_HOST}|'$API_HOST'|g' .combined.env
sed -i.bak -e 's|${DEV_SOURCE_PATH}|'$DEV_SOURCE_PATH'|g' .combined.env
sed -i.bak -e 's|${COMPOSE_PROFILE}|'$COMPOSE_PROFILE'|g' .combined.env
sed -i.bak -e 's|${DJANGO_SUPERUSER_USERNAME}|'$DJANGO_SUPERUSER_USERNAME'|g' .combined.env
sed -i.bak -e 's|${DJANGO_SUPERUSER_PASSWORD}|'$DJANGO_SUPERUSER_PASSWORD'|g' .combined.env
sed -i.bak -e 's|${NGINX_PORT}|'$NGINX_PORT'|g' .combined.env
sed -i.bak -e 's|${NGINX_SSL_PORT}|'$NGINX_SSL_PORT'|g' .combined.env
sed -i.bak -e 's|${COMPOSE_CONTEXT}|'$COMPOSE_CONTEXT'|g' .combined.env
sed -i.bak -e 's|${DEV_IMAGE_SUFFIX}|'$DEV_IMAGE_SUFFIX'|g' .combined.env
sed -i.bak -e 's|${DEV_VOLUME_SUFFIX}|'$DEV_VOLUME_SUFFIX'|g' .combined.env
sed -i.bak -e 's|${COMPOSE_PROJECT_NAME}|'$COMPOSE_PROJECT_NAME'|g' .combined.env

# Iterate over all the compose files and perform variable substitution
compose_args=()
for compose_file_path in "${compose_file_list[@]}"; do
  if [[ $compose_file_path == "-f" ]]; then
    continue
  fi
  IFS="/" read -ra compose_file_path_list <<< "$compose_file_path"
  filename="${compose_file_path_list[-1]}"
  directory=${compose_file_path%%$filename}.compiled
  compiled_file_name=${directory}/${filename}
  mkdir -p $directory
  # compile a compose.yaml from all variables
  (source '.combined.env' &&
  sed -e 's|${API_PORT}|'$API_PORT'|g' $compose_file_path > ${compiled_file_name} && \
  sed -i.bak -e 's|${API_PROTOCOL}|'$API_PROTOCOL'|g' ${compiled_file_name} && \
  sed -i.bak -e 's|${API_HOST}|'$API_HOST'|g' ${compiled_file_name} && \
  sed -i.bak -e 's|${DEV_SOURCE_PATH}|'$DEV_SOURCE_PATH'|g' ${compiled_file_name} && \
  sed -i.bak -e 's|${COMPOSE_PROFILE}|'$COMPOSE_PROFILE'|g' ${compiled_file_name} && \
  sed -i.bak -e 's|${DJANGO_SUPERUSER_USERNAME}|'$DJANGO_SUPERUSER_USERNAME'|g' ${compiled_file_name} && \
  sed -i.bak -e 's|${DJANGO_SUPERUSER_PASSWORD}|'$DJANGO_SUPERUSER_PASSWORD'|g' ${compiled_file_name} && \
  sed -i.bak -e 's|${NGINX_PORT}|'$NGINX_PORT'|g' ${compiled_file_name} && \
  sed -i.bak -e 's|${NGINX_SSL_PORT}|'$NGINX_SSL_PORT'|g' ${compiled_file_name} && \
  sed -i.bak -e 's|${COMPOSE_CONTEXT}|'$COMPOSE_CONTEXT'|g' ${compiled_file_name} && \
  sed -i.bak -e 's|${DEV_IMAGE_SUFFIX}|'$DEV_IMAGE_SUFFIX'|g' ${compiled_file_name} && \
  sed -i.bak -e 's|${DEV_VOLUME_SUFFIX}|'$DEV_VOLUME_SUFFIX'|g' ${compiled_file_name} && \
  sed -i.bak -e 's|${COMPOSE_PROJECT_NAME}|'$COMPOSE_PROJECT_NAME'|g' ${compiled_file_name} && \
  rm ${compiled_file_name}.bak)
  compose_args+=(
    -f ${compiled_file_name}
  )
done


rm .combined.env.bak

if command -v podman-compose > /dev/null
then
  compose_exec=podman-compose
else
  compose_exec=docker-compose
fi
exec ${compose_exec} "${compose_args[@]}" -p "${COMPOSE_PROJECT_NAME}" "$@"
